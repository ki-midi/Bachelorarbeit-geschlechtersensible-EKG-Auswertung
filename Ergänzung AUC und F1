import pandas as pd
import numpy as np
import tensorflow as tf
import wfdb
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.utils import to_categorical
from sklearn.metrics import accuracy_score, confusion_matrix, f1_score, roc_auc_score
from sklearn.preprocessing import label_binarize


models = {
    "NN_Alle": (r"C:\Users\micha\OneDrive\Desktop\ekg\nn\nn_alle_fertig.keras",
                r"C:\Users\micha\OneDrive\Desktop\ekg\ekgdaten\ya_testdatensatz.csv"),
    "NN_M": (r"C:\Users\micha\OneDrive\Desktop\ekg\nn\nn_m_fertig.keras",
              r"C:\Users\micha\OneDrive\Desktop\ekg\ekgdaten\y0_testdatensatz.csv"),
    "NN_W": (r"C:\Users\micha\OneDrive\Desktop\ekg\nn\nn_w_fertig.keras",
              r"C:\Users\micha\OneDrive\Desktop\ekg\ekgdaten\y1_testdatensatz.csv")
}

ekg_path = r"C:/Users/micha/OneDrive/Desktop/ekg/ekgdaten/"
ekg_limit = 731

def ekg_daten_laden(Ya, path):
    data = [wfdb.rdsamp(path + f)[0] for f in Ya.filename_lr]
    return np.array(data)

results = []


for model_name, (model_path, data_path) in models.items():
    
    model = tf.keras.models.load_model(model_path)

    Ya = pd.read_csv(data_path, index_col='ecg_id').iloc[:ekg_limit]

    Yami = Ya.iloc[:, 3].values
    label_encoder = LabelEncoder()
    Yami_encoded = label_encoder.fit_transform(Yami)
    Yami_categorical = to_categorical(Yami_encoded)

    X_test = ekg_daten_laden(Ya, ekg_path)

    predictions = model.predict(X_test)
    predicted_classes = np.argmax(predictions, axis=1)

    accuracy = accuracy_score(Yami_encoded, predicted_classes)
    f1 = f1_score(Yami_encoded, predicted_classes, average='weighted')
    Yami_binarized = label_binarize(Yami_encoded, classes=np.arange(len(label_encoder.classes_)))
    auc = roc_auc_score(Yami_binarized, predictions, average='weighted', multi_class='ovr')

    results.append((model_name, accuracy, f1, auc))


print(results)


metrics = ["Accuracy", "F1-Score", "AUC"]
for metric in metrics:
    plt.figure(figsize=(8, 4))
    sns.barplot(x="Modell", y=metric, data=results)
    plt.show()
