import pandas as pd
import numpy as np
import wfdb
import os
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.utils import to_categorical
from sklearn.metrics import accuracy_score, confusion_matrix
from tensorflow.keras import layers, models

pfade = {
    "alle": r"G:\Meine Ablage\EKG\ekglisten\alle01.csv",
    "männer": r"G:\Meine Ablage\EKG\ekglisten\männer01.csv",
    "frauen": r"G:\Meine Ablage\EKG\ekglisten\frauen01.csv"
}

ekg_path = r"C:/Users/micha/OneDrive/Desktop/ekg/ekgdaten/"
output_path = r"G:\Meine Ablage\EKG\ekglisten"

def ekg_daten_laden(df, path):
    return np.array([wfdb.rdsamp(path + f)[0] for f in df["filename_lr"]])

def build_custom_model(input_shape, num_classes):
    model = models.Sequential()

    model.add(layers.Conv1D(filters=32, kernel_size=3, activation=None, input_shape=input_shape))
    model.add(layers.BatchNormalization())
    model.add(layers.Activation('relu'))
    model.add(layers.Dropout(0.2))
    model.add(layers.AveragePooling1D(pool_size=2))

    model.add(layers.Conv1D(filters=64, kernel_size=3, activation=None))
    model.add(layers.BatchNormalization())
    model.add(layers.Activation('relu'))
    model.add(layers.Dropout(0.2))

    model.add(layers.Conv1D(filters=128, kernel_size=3, activation=None))
    model.add(layers.BatchNormalization())
    model.add(layers.Activation('relu'))
    model.add(layers.Dropout(0.3))
    model.add(layers.GlobalAveragePooling1D())

    model.add(layers.Dense(32, activation='relu'))
    model.add(layers.Dropout(0.3))
    model.add(layers.Dense(64, activation='relu'))
    model.add(layers.Dropout(0.5))
    model.add(layers.Dense(128, activation='relu'))
    model.add(layers.Dropout(0.5))
    model.add(layers.Dense(256, activation='relu'))
    model.add(layers.Dropout(0.6))

    model.add(layers.Dense(num_classes, activation='softmax'))

    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    return model


for name, data_path in pfade.items():

    df = pd.read_csv(data_path)
    df = df.sample(frac=1, random_state=42).reset_index(drop=True) 

    # 4500 zum Trainieren udn Validieren, 500 zum Testen
    df_trainval = df.iloc[:4500].copy()
    df_test = df.iloc[4500:5000].copy()

    y_trainval = df_trainval["Y_MI"]
    y_test = df_test["Y_MI"]

    label_encoder = LabelEncoder()
    y_trainval_encoded = label_encoder.fit_transform(y_trainval)
    y_trainval_cat = to_categorical(y_trainval_encoded)

    y_test_encoded = label_encoder.transform(y_test)
    y_test_cat = to_categorical(y_test_encoded)

    X_trainval = ekg_daten_laden(df_trainval, ekg_path)
    X_test = ekg_daten_laden(df_test, ekg_path)

    X_train, X_val, y_train, y_val = train_test_split(X_trainval, y_trainval_cat, test_size=0.2, random_state=42)

    model = build_custom_model(input_shape=X_train.shape[1:], num_classes=len(label_encoder.classes_))
    model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=50, batch_size=32)

    model_path = os.path.join(output_path, f"modell_{name}.h5")
    model.save(model_path)

    predictions = model.predict(X_test)
    predicted_classes = np.argmax(predictions, axis=1)

    acc = accuracy_score(y_test_encoded, predicted_classes)

    cm = confusion_matrix(y_test_encoded, predicted_classes)
    plt.figure(figsize=(6, 4))
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
                xticklabels=label_encoder.classes_,
                yticklabels=label_encoder.classes_)
    plt.xlabel("Vorhergesagt")
    plt.ylabel("Tatsächlich")
    plt.title(f"Konfusionsmatrix – {name}")
    plt.show()
